// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PersistentState {
  id             Int              @id
  state          String
  User           User[]
  Country        Country[]
  City           City[]
  Place          Place[]
  Memory         Memory[]
  CountryGEOJSON CountryGEOJSON[]
  CityMaster     CityMaster[]
}

model User {
  id Int @id @default(autoincrement())

  email     String
  firstName String
  lastName  String
  password  String
  Country   Country[]
  City      City[]
  Place     Place[]
  Memory    Memory[]

  pState   PersistentState @relation(fields: [pStateId], references: [id])
  pStateId Int             @default(1)

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@unique([email])
  @@index([email])
}

model CountryGEOJSON {
  id        Int    @id @default(autoincrement())
  name      String
  geoJson   Json
  iso_a3    String
  iso_a2    String
  region    String
  subRegion String

  pState   PersistentState @relation(fields: [pStateId], references: [id])
  pStateId Int             @default(1)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  Country    Country[]
  CityMaster CityMaster[]

  @@unique([name])
  @@index([iso_a2])
  @@index([iso_a3])
}

model CityMaster {
  id   Int    @id @default(autoincrement())
  name String
  lat  Float
  lon  Float

  pState   PersistentState @relation(fields: [pStateId], references: [id])
  pStateId Int             @default(1)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  countryGEOJSON   CountryGEOJSON @relation(fields: [countryGEOJSONId], references: [id])
  countryGEOJSONId Int
  City             City[]

  @@unique([name, countryGEOJSONId])
}

model Country {
  id Int @id @default(autoincrement())

  name             String
  user             User           @relation(fields: [userId], references: [id])
  userId           Int
  iso_a3           String
  countryGEOJSON   CountryGEOJSON @relation(fields: [countryGEOJSONId], references: [id])
  countryGEOJSONId Int
  Place            Place[]
  Memory           Memory[]

  pState   PersistentState @relation(fields: [pStateId], references: [id])
  pStateId Int             @default(1)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([name, userId])
  @@index([name, userId])
}

model City {
  id Int @id @default(autoincrement())

  name         String
  user         User       @relation(fields: [userId], references: [id])
  userId       Int
  Place        Place[]
  Memory       Memory[]
  cityMaster   CityMaster @relation(fields: [cityMasterId], references: [id])
  cityMasterId Int

  pState   PersistentState @relation(fields: [pStateId], references: [id])
  pStateId Int             @default(1)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([name, userId])
  @@index([userId])
}

model Place {
  id Int @id @default(autoincrement())

  name      String
  city      City     @relation(fields: [cityId], references: [id])
  cityId    Int
  country   Country  @relation(fields: [countryId], references: [id])
  countryId Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  Memory    Memory[]

  pState   PersistentState @relation(fields: [pStateId], references: [id])
  pStateId Int             @default(1)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  lat Float
  lon Float

  @@unique([name, userId])
  @@index([userId])
  @@index([userId, countryId, cityId])
  @@index([userId, cityId])
}

model Memory {
  id Int @id @default(autoincrement())

  name      String
  place     Place   @relation(fields: [placeId], references: [id])
  placeId   Int
  city      City    @relation(fields: [cityId], references: [id])
  cityId    Int
  country   Country @relation(fields: [countryId], references: [id])
  countryId Int
  user      User    @relation(fields: [userId], references: [id])
  userId    Int

  pState    PersistentState @relation(fields: [pStateId], references: [id])
  pStateId  Int             @default(1)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  deletedAt DateTime?

  @@unique([name, userId])
  @@index([userId])
  @@index([userId, countryId, cityId, placeId])
  @@index([userId, cityId])
  @@index([userId, placeId])
}
